#!/usr/bin/env python3
"""
Script para configurar secrets de GitHub
Gu√≠a al usuario para configurar los secrets necesarios
"""

import os
import sys
from pathlib import Path

def print_banner():
    """Imprimir banner del script"""
    print("=" * 60)
    print("üîê CONFIGURADOR DE SECRETS DE GITHUB")
    print("=" * 60)
    print("Este script te ayudar√° a configurar los secrets necesarios")
    print("para que C4A Alerts funcione correctamente en GitHub Actions.")
    print()

def print_secrets_guide():
    """Imprimir gu√≠a de secrets"""
    print("üìã SECRETS REQUERIDOS PARA GITHUB:")
    print("=" * 40)

    secrets = {
        "TELEGRAM_TOKEN": {
            "description": "Token del bot de Telegram",
            "value": "7330329737:AAGubXJVl7x4KgmaJ916V0HjNm_ErMQr-_c",
            "how_to_get": "Desde @BotFather en Telegram"
        },
        "CHAT_ID": {
            "description": "ID del chat de Telegram",
            "value": "551008154",
            "how_to_get": "Tu Chat ID personal"
        },
        "SLACK_WEBHOOK_URL": {
            "description": "URL del webhook de Slack (opcional)",
            "value": "https://hooks.slack.com/services/...",
            "how_to_get": "Desde la configuraci√≥n de Slack"
        },
        "VERCEL_TOKEN": {
            "description": "Token de Vercel para deployment",
            "value": "vercel_...",
            "how_to_get": "Desde la configuraci√≥n de Vercel"
        },
        "VERCEL_ORG_ID": {
            "description": "ID de la organizaci√≥n de Vercel",
            "value": "team_...",
            "how_to_get": "Desde la configuraci√≥n de Vercel"
        },
        "VERCEL_PROJECT_ID": {
            "description": "ID del proyecto de Vercel",
            "value": "prj_...",
            "how_to_get": "Desde la configuraci√≥n de Vercel"
        },
        "GOOGLE_CREDENTIALS": {
            "description": "Credenciales de Google Cloud (JSON)",
            "value": "{\"type\": \"service_account\", ...}",
            "how_to_get": "Desde Google Cloud Console"
        }
    }

    for secret_name, info in secrets.items():
        print(f"üîë {secret_name}")
        print(f"   üìù Descripci√≥n: {info['description']}")
        print(f"   üí° C√≥mo obtener: {info['how_to_get']}")
        print(f"   üìã Valor actual: {info['value']}")
        print()

def print_setup_instructions():
    """Imprimir instrucciones de configuraci√≥n"""
    print("üìã C√ìMO CONFIGURAR LOS SECRETS:")
    print("=" * 40)
    print("1. Ve a tu repositorio en GitHub")
    print("2. Haz clic en 'Settings' (Configuraci√≥n)")
    print("3. En el men√∫ lateral, haz clic en 'Secrets and variables'")
    print("4. Selecciona 'Actions'")
    print("5. Haz clic en 'New repository secret'")
    print("6. Agrega cada secret con su nombre y valor")
    print()
    print("üîó URL: https://github.com/TU_USUARIO/TU_REPO/settings/secrets/actions")
    print()

def print_local_vs_production():
    """Explicar diferencias entre local y producci√≥n"""
    print("üè† DESARROLLO LOCAL vs üåê PRODUCCI√ìN:")
    print("=" * 40)
    print("üè† DESARROLLO LOCAL:")
    print("   - Usa archivo .env")
    print("   - Variables de entorno locales")
    print("   - Configuraci√≥n en scripts/")
    print()
    print("üåê PRODUCCI√ìN (GitHub Actions):")
    print("   - Usa GitHub Secrets")
    print("   - Variables de entorno seguras")
    print("   - Configuraci√≥n autom√°tica")
    print()

def create_env_template():
    """Crear template de .env para desarrollo local"""
    env_content = """# C4A Alerts - Variables de Entorno (DESARROLLO LOCAL)
# Este archivo NO se sube a GitHub (est√° en .gitignore)

# =============================================================================
# CONFIGURACI√ìN DE TELEGRAM
# =============================================================================
TELEGRAM_TOKEN=7330329737:AAGubXJVl7x4KgmaJ916V0HjNm_ErMQr-_c
CHAT_ID=551008154

# =============================================================================
# CONFIGURACI√ìN DE SLACK (OPCIONAL)
# =============================================================================
SLACK_WEBHOOK_URL=your_slack_webhook_url_here
SLACK_CHANNEL=#alerts

# =============================================================================
# CONFIGURACI√ìN DE BASE DE DATOS
# =============================================================================
DATABASE_URL=sqlite:///./c4a_alerts.db

# =============================================================================
# CONFIGURACI√ìN DE API
# =============================================================================
API_KEY=your_api_key_here
ENVIRONMENT=development

# =============================================================================
# CONFIGURACI√ìN DE COLECTORES
# =============================================================================
MISP_URL=your_misp_url_here
MISP_API_KEY=your_misp_api_key_here
CSIRT_URL=your_csirt_url_here
CSIRT_API_KEY=your_csirt_api_key_here

# =============================================================================
# CONFIGURACI√ìN DE CLOUD FUNCTION
# =============================================================================
WEBHOOK_URL=your_webhook_url_here
"""

    env_path = Path('.env')

    if env_path.exists():
        print("‚úÖ Archivo .env ya existe")
    else:
        try:
            with open(env_path, 'w', encoding='utf-8') as f:
                f.write(env_content)
            print("‚úÖ Archivo .env creado")
        except Exception as e:
            print(f"‚ùå Error creando .env: {e}")

def main():
    """Funci√≥n principal"""
    print_banner()

    print_secrets_guide()
    print_setup_instructions()
    print_local_vs_production()

    print("üîß CONFIGURACI√ìN LOCAL:")
    create_env_template()

    print("\n" + "=" * 60)
    print("üéâ ¬°CONFIGURACI√ìN COMPLETADA!")
    print("=" * 60)
    print("üìã Pr√≥ximos pasos:")
    print("1. Configura los secrets en GitHub")
    print("2. Haz push de tu c√≥digo")
    print("3. Los GitHub Actions se ejecutar√°n autom√°ticamente")
    print("4. Revisa los logs en la pesta√±a 'Actions'")
    print()

if __name__ == "__main__":
    main()
