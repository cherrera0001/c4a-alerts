name: Deploy Serverless Monitoring Platform

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Recolectar alertas cada 6 horas
    - cron: '0 */6 * * *'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  FUNCTION_NAME: c4a-alerts-api
  COLLECTION_FUNCTION: c4a-alerts-collector
  REGION: us-central1

jobs:
  deploy-cloud-functions:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install -r cloud-function/requirements.txt
      
      - name: Deploy Main API Function
        run: |
          gcloud functions deploy ${{ env.FUNCTION_NAME }} \
            --runtime python310 \
            --trigger-http \
            --allow-unauthenticated \
            --source cloud-function \
            --entry-point process_alert \
            --memory 512MB \
            --timeout 540s \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --set-env-vars "ENVIRONMENT=production"
      
      - name: Deploy Collection Function
        run: |
          gcloud functions deploy ${{ env.COLLECTION_FUNCTION }} \
            --runtime python310 \
            --trigger-http \
            --allow-unauthenticated \
            --source cloud-function \
            --entry-point collect_alerts \
            --memory 512MB \
            --timeout 540s \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --set-env-vars "ENVIRONMENT=production"
      
      - name: Get Function URLs
        id: function-urls
        run: |
          API_URL=$(gcloud functions describe ${{ env.FUNCTION_NAME }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --format="value(httpsTrigger.url)")
          COLLECTOR_URL=$(gcloud functions describe ${{ env.COLLECTION_FUNCTION }} \
            --region=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --format="value(httpsTrigger.url)")
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "collector-url=$COLLECTOR_URL" >> $GITHUB_OUTPUT
      
      - name: Test API Health
        run: |
          curl -f "${{ steps.function-urls.outputs.api-url }}" || exit 1
      
      - name: Update Environment Variables
        run: |
          echo "CLOUD_FUNCTION_URL=${{ steps.function-urls.outputs.api-url }}" >> $GITHUB_ENV
          echo "COLLECTOR_FUNCTION_URL=${{ steps.function-urls.outputs.collector-url }}" >> $GITHUB_ENV

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-cloud-functions
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm install
      
      - name: Build application
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_CLOUD_FUNCTION_URL: ${{ needs.deploy-cloud-functions.outputs.api-url }}
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

  collect-alerts:
    name: Collect Alerts
    runs-on: ubuntu-latest
    needs: deploy-cloud-functions
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Trigger Alert Collection
        run: |
          curl -X POST "${{ needs.deploy-cloud-functions.outputs.collector-url }}" \
            -H "Content-Type: application/json" \
            -d '{"action": "collect_alerts"}'
      
      - name: Report Collection Status
        run: |
          echo "Alert collection triggered successfully"
          echo "Collection URL: ${{ needs.deploy-cloud-functions.outputs.collector-url }}"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-cloud-functions, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Cloud Functions Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **API Function**: ${{ needs.deploy-cloud-functions.outputs.api-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Collector Function**: ${{ needs.deploy-cloud-functions.outputs.collector-url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Frontend Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard**: Available at Vercel deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure GitHub Secrets for production" >> $GITHUB_STEP_SUMMARY
          echo "2. Set up monitoring and alerting" >> $GITHUB_STEP_SUMMARY
          echo "3. Test the complete platform" >> $GITHUB_STEP_SUMMARY
