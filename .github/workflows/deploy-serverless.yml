name: Deploy Serverless Monitoring Platform

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Recolectar alertas cada 6 horas
    - cron: '0 */6 * * *'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  FUNCTION_NAME: c4a-alerts-api
  COLLECTION_FUNCTION: c4a-alerts-collector
  REGION: us-central1

jobs:
  deploy-cloud-functions:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    outputs:
      api-url: ${{ steps.function-urls.outputs.api-url }}
      collector-url: ${{ steps.function-urls.outputs.collector-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r cloud-function/requirements.txt

      - name: Deploy Main API Function
        run: |
          gcloud functions deploy ${{ env.FUNCTION_NAME }} \
            --runtime python310 \
            --trigger-http \
            --allow-unauthenticated \
            --source cloud-function \
            --entry-point process_alert \
            --memory 256MB \
            --timeout 300s \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --set-env-vars "ENVIRONMENT=production"

      - name: Deploy Collection Function
        run: |
          gcloud functions deploy ${{ env.COLLECTION_FUNCTION }} \
            --runtime python310 \
            --trigger-http \
            --allow-unauthenticated \
            --source cloud-function \
            --entry-point collect_alerts \
            --memory 256MB \
            --timeout 300s \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }} \
            --set-env-vars "ENVIRONMENT=production"

      - name: Get Function URLs
        id: function-urls
        run: |
          # Construir URLs manualmente usando el patrón conocido
          API_URL="https://us-central1-${{ env.PROJECT_ID }}.cloudfunctions.net/${{ env.FUNCTION_NAME }}"
          COLLECTOR_URL="https://us-central1-${{ env.PROJECT_ID }}.cloudfunctions.net/${{ env.COLLECTION_FUNCTION }}"

          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "collector-url=$COLLECTOR_URL" >> $GITHUB_OUTPUT
          echo "API URL: $API_URL"
          echo "Collector URL: $COLLECTOR_URL"

          # Verificar que las funciones existen
          gcloud functions list --project=${{ env.PROJECT_ID }} --region=${{ env.REGION }} --format="table(name,status,url)"

      - name: Test API Health
        run: |
          if [ -n "${{ steps.function-urls.outputs.api-url }}" ]; then
            curl -f "${{ steps.function-urls.outputs.api-url }}/health" || echo "Health check failed but continuing..."
          else
            echo "API URL not available, skipping health check"
          fi

  deploy-dashboard:
    name: Deploy Dashboard
    runs-on: ubuntu-latest
    needs: deploy-cloud-functions
    steps:
      - name: Dashboard Deployed
        run: |
          echo "✅ Dashboard integrado en Cloud Function"
          echo "🌐 URL del Dashboard: ${{ needs.deploy-cloud-functions.outputs.api-url }}"
          echo "📊 Endpoints disponibles:"
          echo "   - Dashboard: ${{ needs.deploy-cloud-functions.outputs.api-url }}"
          echo "   - Health: ${{ needs.deploy-cloud-functions.outputs.api-url }}/health"
          echo "   - Stats: ${{ needs.deploy-cloud-functions.outputs.api-url }}/stats"
          echo "   - Alerts: ${{ needs.deploy-cloud-functions.outputs.api-url }}/alerts"

  collect-alerts:
    name: Collect Alerts
    runs-on: ubuntu-latest
    needs: deploy-cloud-functions
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Trigger Alert Collection
        run: |
          curl -X POST "${{ needs.deploy-cloud-functions.outputs.collector-url }}" \
            -H "Content-Type: application/json" \
            -d '{"action": "collect_alerts"}'

      - name: Report Collection Status
        run: |
          echo "Alert collection triggered successfully"
          echo "Collection URL: ${{ needs.deploy-cloud-functions.outputs.collector-url }}"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-cloud-functions, deploy-dashboard]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Cloud Functions Deployed (Cost Optimized)" >> $GITHUB_STEP_SUMMARY
          echo "- **API Function**: ${{ needs.deploy-cloud-functions.outputs.api-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Collector Function**: ${{ needs.deploy-cloud-functions.outputs.collector-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory**: 256MB (optimized from 512MB)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timeout**: 300s (optimized from 540s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Dashboard Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard**: ${{ needs.deploy-cloud-functions.outputs.api-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: ${{ needs.deploy-cloud-functions.outputs.api-url }}/health" >> $GITHUB_STEP_SUMMARY
          echo "- **Statistics**: ${{ needs.deploy-cloud-functions.outputs.api-url }}/stats" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 Cost Optimization" >> $GITHUB_STEP_SUMMARY
          echo "- **Free Tier**: $300 USD for 12 months" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud Functions**: 2M invocations/month free" >> $GITHUB_STEP_SUMMARY
          echo "- **Firestore**: 1GB storage + 50K reads/day free" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the complete platform" >> $GITHUB_STEP_SUMMARY
          echo "2. Set up monitoring and alerting" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure OpenCTI integration" >> $GITHUB_STEP_SUMMARY
