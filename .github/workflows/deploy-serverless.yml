name: Deploy Serverless Monitoring Platform

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    # Recolectar alertas cada 6 horas
    - cron: '0 */6 * * *'

env:
  PROJECT_ID: c4a-alerts-personal-1756352164  # Project ID directo mientras verificamos el secret
  FUNCTION_NAME: c4a-alerts-api
  COLLECTION_FUNCTION: c4a-alerts-collector
  REGION: us-central1

jobs:
  deploy-cloud-functions:
    name: Deploy Cloud Functions
    runs-on: ubuntu-latest
    outputs:
      project-id: ${{ env.PROJECT_ID }}
      function-name: ${{ env.FUNCTION_NAME }}
      collection-function: ${{ env.COLLECTION_FUNCTION }}
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r cloud-function/requirements.txt

                    - name: Deploy Main API Function
         run: |
           gcloud functions deploy ${{ env.FUNCTION_NAME }} \
             --runtime python310 \
             --trigger-http \
             --allow-unauthenticated \
             --source cloud-function \
             --entry-point process_alert \
             --memory 256MB \
             --timeout 300s \
             --region ${{ env.REGION }} \
             --project ${{ env.PROJECT_ID }} \
             --set-env-vars "ENVIRONMENT=production,ANCI_USERNAME=crherrera@c4a.cl,ANCI_PASSWORD=${{ secrets.ANCI_PASSWORD }},TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }},TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}"

       - name: Deploy Collection Function
         run: |
           gcloud functions deploy ${{ env.COLLECTION_FUNCTION }} \
             --runtime python310 \
             --trigger-http \
             --allow-unauthenticated \
             --source cloud-function \
             --entry-point collect_alerts \
             --memory 256MB \
             --timeout 300s \
             --region ${{ env.REGION }} \
             --project ${{ env.PROJECT_ID }} \
             --set-env-vars "ENVIRONMENT=production,ANCI_USERNAME=crherrera@c4a.cl,ANCI_PASSWORD=${{ secrets.ANCI_PASSWORD }}"

      - name: Verify Functions Deployed
        run: |
          echo "📊 Debug - PROJECT_ID: '${{ env.PROJECT_ID }}'"
          echo "📊 Debug - FUNCTION_NAME: '${{ env.FUNCTION_NAME }}'"
          echo "📊 Debug - COLLECTION_FUNCTION: '${{ env.COLLECTION_FUNCTION }}'"

          # Construir URLs para verificación
          API_URL="https://us-central1-${{ env.PROJECT_ID }}.cloudfunctions.net/${{ env.FUNCTION_NAME }}"
          COLLECTOR_URL="https://us-central1-${{ env.PROJECT_ID }}.cloudfunctions.net/${{ env.COLLECTION_FUNCTION }}"

          echo "✅ Cloud Functions desplegadas:"
          echo "   API: $API_URL"
          echo "   Collector: $COLLECTOR_URL"

          # Verificar que las funciones existen
          gcloud functions list --project=${{ env.PROJECT_ID }} --regions=${{ env.REGION }} --format="table(name,status,url)"

      - name: Test API Health
        run: |
          API_URL="https://us-central1-${{ env.PROJECT_ID }}.cloudfunctions.net/${{ env.FUNCTION_NAME }}"
          curl -f "$API_URL/health" || echo "Health check failed but continuing..."

  collect-alerts:
    name: Collect Alerts
    runs-on: ubuntu-latest
    needs: deploy-cloud-functions
    # SIEMPRE ejecutar después del deploy (eliminamos las condiciones restrictivas)
    steps:
      - name: Trigger Alert Collection
        run: |
          echo "🔍 Iniciando recolección de alertas desde MISP CSIRT..."

          # Usar variables de entorno directamente
          PROJECT_ID="c4a-alerts-personal-1756352164"
          COLLECTION_FUNCTION="c4a-alerts-collector"

          echo "📊 Debug - Project ID: '$PROJECT_ID'"
          echo "📊 Debug - Collection Function: '$COLLECTION_FUNCTION'"

          COLLECTOR_URL="https://us-central1-$PROJECT_ID.cloudfunctions.net/$COLLECTION_FUNCTION"
          echo "📊 Debug - Collector URL: '$COLLECTOR_URL'"

          curl -X POST "$COLLECTOR_URL" \
            -H "Content-Type: application/json" \
            -d '{"action": "collect_alerts"}'

      - name: Report Collection Status
        run: |
          echo "✅ Recolección de alertas completada"
          echo "📊 URL del Collector: https://us-central1-${{ needs.deploy-cloud-functions.outputs.project-id }}.cloudfunctions.net/${{ needs.deploy-cloud-functions.outputs.collection-function }}"
          echo "🔗 Datos disponibles en Firestore"

  deploy-dashboard:
    name: Deploy Dashboard
    runs-on: ubuntu-latest
    needs: [deploy-cloud-functions, collect-alerts]
    steps:
      - name: Dashboard Deployed
        run: |
          PROJECT_ID="c4a-alerts-personal-1756352164"
          FUNCTION_NAME="c4a-alerts-api"
          API_URL="https://us-central1-$PROJECT_ID.cloudfunctions.net/$FUNCTION_NAME"
          echo "✅ Dashboard integrado en Cloud Function"
          echo "🌐 URL del Dashboard: $API_URL"
          echo "📊 Endpoints disponibles:"
          echo "   - Dashboard: $API_URL"
          echo "   - Health: $API_URL/health"
          echo "   - Stats: $API_URL/stats"
          echo "   - Alerts: $API_URL/alerts"
          echo ""
          echo "📈 Datos de MISP CSIRT ya recolectados y disponibles"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-cloud-functions, collect-alerts, deploy-dashboard]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          PROJECT_ID="c4a-alerts-personal-1756352164"
          FUNCTION_NAME="c4a-alerts-api"
          COLLECTION_FUNCTION="c4a-alerts-collector"
          API_URL="https://us-central1-$PROJECT_ID.cloudfunctions.net/$FUNCTION_NAME"
          COLLECTOR_URL="https://us-central1-$PROJECT_ID.cloudfunctions.net/$COLLECTION_FUNCTION"

          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Cloud Functions Deployed (Cost Optimized)" >> $GITHUB_STEP_SUMMARY
          echo "- **API Function**: $API_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Collector Function**: $COLLECTOR_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory**: 256MB (optimized from 512MB)" >> $GITHUB_STEP_SUMMARY
          echo "- **Timeout**: 300s (optimized from 540s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Threat Intelligence Collected" >> $GITHUB_STEP_SUMMARY
          echo "- **MISP CSIRT**: Alertas recolectadas desde CSIRT Nacional de Chile" >> $GITHUB_STEP_SUMMARY
          echo "- **Data Storage**: Firestore con datos históricos" >> $GITHUB_STEP_SUMMARY
          echo "- **Real-time**: Datos disponibles inmediatamente" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Dashboard Deployed" >> $GITHUB_STEP_SUMMARY
          echo "- **Dashboard**: $API_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check**: $API_URL/health" >> $GITHUB_STEP_SUMMARY
          echo "- **Statistics**: $API_URL/stats" >> $GITHUB_STEP_SUMMARY
          echo "- **Alerts**: $API_URL/alerts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💰 Cost Optimization" >> $GITHUB_STEP_SUMMARY
          echo "- **Free Tier**: $300 USD for 12 months" >> $GITHUB_STEP_SUMMARY
          echo "- **Cloud Functions**: 2M invocations/month free" >> $GITHUB_STEP_SUMMARY
          echo "- **Firestore**: 1GB storage + 50K reads/day free" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the complete platform" >> $GITHUB_STEP_SUMMARY
          echo "2. Set up monitoring and alerting" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure OpenCTI integration" >> $GITHUB_STEP_SUMMARY
