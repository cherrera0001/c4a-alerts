name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy bandit black isort

      - name: Run Ruff (linter)
        run: ruff check c4aalerts/ tests/

      - name: Run Black (formatter)
        run: black --check c4aalerts/ tests/

      - name: Run isort (import sorter)
        run: isort --check-only c4aalerts/ tests/

      - name: Run MyPy (type checker)
        run: mypy c4aalerts/

      - name: Run Bandit (security)
        run: bandit -r c4aalerts/ -f json -o bandit-report.json || true

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov httpx
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=c4aalerts --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: c4a_alerts_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio httpx redis psycopg2-binary
          pip install -e .

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/c4a_alerts_test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/integration/ -v

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run safety check
        run: safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: pip-audit --format json --output pip-audit-report.json || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

  docker-build:
    name: Docker Build & Scan
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t c4a-alerts:latest .

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'c4a-alerts:latest'
          format: 'sarif'
          output: 'trivy-image-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # TODO: Add actual deployment steps

      - name: Notify deployment
        run: |
          echo "Staging deployment completed successfully"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # TODO: Add actual deployment steps

      - name: Notify deployment
        run: |
          echo "Production deployment completed successfully"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: always()
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ All checks passed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Some checks failed. Please review the logs."
