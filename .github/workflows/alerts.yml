name: Alert Collection & Processing

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      source:
        description: 'Specific source to collect from (optional)'
        required: false
        default: ''
      force:
        description: 'Force collection even if recently collected'
        required: false
        default: 'false'

env:
  PYTHON_VERSION: "3.10"

jobs:
  collect-alerts:
    name: Collect and Process Alerts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn httpx redis celery
          pip install -e .

      - name: Create environment file
        run: |
          cat > .env << EOF
          # Application Configuration
          APP_NAME=C4A Alerts
          APP_VERSION=2.0.0
          DEBUG=false
          LOG_LEVEL=INFO

          # Database Configuration
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/c4a_alerts

          # Redis Configuration
          REDIS_URL=redis://localhost:6379/0

          # API Configuration
          API_HOST=0.0.0.0
          API_PORT=8000
          API_WORKERS=1

          # Security Configuration
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          API_KEY_HEADER=X-API-Key

          # Telegram Configuration
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID }}

          # Slack Configuration
          SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL=${{ secrets.SLACK_CHANNEL }}

          # Email Configuration
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          EMAIL_TO=${{ secrets.EMAIL_TO }}

          # CTI Platform Configuration
          OPENCTI_URL=${{ secrets.OPENCTI_URL }}
          OPENCTI_API_KEY=${{ secrets.OPENCTI_API_KEY }}

          MISP_URL=${{ secrets.MISP_URL }}
          MISP_API_KEY=${{ secrets.MISP_API_KEY }}

          THEHIVE_URL=${{ secrets.THEHIVE_URL }}
          THEHIVE_API_KEY=${{ secrets.THEHIVE_API_KEY }}
          EOF

      - name: Start API server
        run: |
          uvicorn c4aalerts.app.api.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Trigger alert collection
        run: |
          source="${{ github.event.inputs.source }}"
          force="${{ github.event.inputs.force }}"

          if [ -n "$source" ]; then
            curl -X POST "http://localhost:8000/api/v1/workers/collect" \
              -H "Content-Type: application/json" \
              -d "{\"source\": \"$source\", \"force\": $force}"
          else
            curl -X POST "http://localhost:8000/api/v1/workers/collect" \
              -H "Content-Type: application/json" \
              -d "{\"force\": $force}"
          fi

      - name: Wait for processing
        run: |
          sleep 30

      - name: Check processing status
        run: |
          curl -X GET "http://localhost:8000/api/v1/workers/status" \
            -H "Content-Type: application/json"

      - name: Generate collection report
        run: |
          echo "## Alert Collection Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Collection Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Source**: ${{ github.event.inputs.source || 'All sources' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Collection**: ${{ github.event.inputs.force }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY

      - name: Stop API server
        run: |
          pkill -f uvicorn || true

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: collect-alerts
    if: always()
    steps:
      - name: Notify on success
        if: needs.collect-alerts.result == 'success'
        run: |
          echo "✅ Alert collection completed successfully!"

      - name: Notify on failure
        if: needs.collect-alerts.result == 'failure'
        run: |
          echo "❌ Alert collection failed. Please check the logs."
